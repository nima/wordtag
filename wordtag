#!/usr/bin/env ruby

require 'set'

Word = Struct.new(:word, :example, :tags) do
  def initialize(word, tags, example)
    self.word = word
    self.tags = Set.new(tags)
    self.example = example
  end
  def to_s
    return "#{self.word} - #{self.example}"
  end
end

indexed = {}
tags = []

input = ARGV[0]
if ARGV.size > 0 && File.exist?(input)
  hashtags = ARGV[1..-1].map{|w| "##{w.sub(/^#/,'').downcase}"}

  File.open(input, 'r') do |fH|
    l = 0
    fH.each_line.map{|line| line.strip}.each do |line|
      heading = line.match('^(#{1,5}) (.*)')
      if heading
        header = heading[1].length
        title  = heading[2]
        tags = tags[0...header-1]
        tags << "##{title.gsub(/\W+/, ' ').split().map{|w| w.downcase.capitalize}.join('')}"
        #puts "#{'#' * header} #{tags.join('/')}"
      else
        words = line.scan(/\*\*(\w+)\*\*/).flatten
        wordtags = line.scan(/#\w+/)
        line = line.gsub(/^ *- */, '').gsub(/#\w+/, '').gsub(/\([ ,;]*\)/, '').strip
        if words.empty?
          #p line
        else
          words.each do |word|
            wordtags.concat(tags)
            word = Word.new(word, wordtags, line)
            word.tags.map{|tag| tag.downcase}.each do |tag|
              indexed[tag] = Set.new unless indexed.key? tag
              indexed[tag] << word
            end
          end
        end
      end
    end
  end

  if hashtags.empty?
    indexed.each do |hashtag,words|
      puts "#{hashtag}: #{words.size}"
    end
  else
    words = hashtags.map{|ht| indexed[ht]}.delete_if{|s| s.nil?}.inject(:&)
    words.each do |w|
      puts w
    end
    puts
    puts "Related hashtags: #{words.map{|w| w.tags}.inject(:&).subtract(hashtags).to_a.join(', ')}"
  end
else
  puts "Usage: #{File.basename(__FILE__)} <input-file> [<hashtag> [<hashtag> [...]]]"
end
