#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'

require 'set'
#require 'wordnik'

Word = Struct.new(:word, :example, :tags) do
  def initialize(word, tags, example)
    self.word = word
    self.tags = Set.new(tags)
    self.example = example
  end
  def to_s
    return "#{self.word} (#{self.tags.to_a.join(', ')})"
  end
  def to_str
    return self.word
  end
end

indexed = {}
tags = []

input = ARGV[0]
if ARGV.size > 0 && File.exist?(input)
  regexes, hashtags = ARGV[1..-1].partition{|token| token.match(/^\/.+\/$/)}
  hashtags.map!{|w| "##{w.sub(/^#/,'').downcase}"}
  regexes.map!{|r| Regexp.new r[1...-1]}

  File.open(input, 'r') do |fH|
    l = 0
    fH.each_line.map{|line| line.strip}.each do |line|
      heading = line.match('^(#{1,6}) (.*)')
      if heading
        header = heading[1].length
        title  = heading[2]
        next title.match(/vim:/)
        tags = tags[0...header-1]
        tags << "##{title.gsub(/\W+/, ' ').split().map{|w| w.downcase.capitalize}.join('')}"
        #puts "#{'#' * header} #{tags.join('/')}"
      else
        words = line.scan(/\*\*(\w+(?: \w+)*)\*\*/).map{|w| w.pop}
        wordtags = line.scan(/#\w+/)
        line = line.gsub(/---*/,'').gsub(/^ *- */, '').gsub(/#\w+/, '').gsub(/\([ ,;]*\)/, '').strip
        if line.size > 0
          if words.empty?
            puts "No **words**: #{line}"
          else
            words.each do |word|
              wordtags.concat(tags)
              word = Word.new(word, wordtags, line)
              word.tags.map{|tag| tag.downcase}.each do |tag|
                indexed[tag] = Set.new unless indexed.key? tag
                indexed[tag] << word
              end
            end
          end
        end
      end
    end
  end

  if hashtags.empty? && regexes.empty?
    indexed.each do |hashtag,words|
      puts "#{hashtag}: #{words.size}"
    end
  else
    words = nil
    if hashtags.empty?
      words = indexed.values.inject(:|).to_set
    else
      words = hashtags.select{|ht| indexed.key? ht}.map{|ht| indexed[ht]}.to_set
      words = words.inject(:&) unless words.empty?
    end

    unless regexes.empty?
      words.select!{|w| regexes.map{|r| r.match(w)}.all? }
    end

    unless words.empty?
      words.each{|w| puts w}
    end

    unless hashtags.empty?
      related = hashtags.map{|ht| indexed[ht]}.inject(:&).map{|w| w.tags.map{|t| t.downcase}}.inject(:|) - hashtags
      puts "Related hashtags: #{related.join(', ')}" unless related.empty?
    end
  end
else
  puts "Usage: #{File.basename(__FILE__)} <input-file> [<hashtag> [<hashtag> [...]]]"
end
